from gym.envs.registration import register
# get samples for environment
from gym_malware.envs.utils import interface, pefeatures
# create a holdout set
from sklearn.model_selection import train_test_split
import numpy as np
import configparser
import os
import sys
import pdb

module_path = os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))
# Location of config file
CONFIG_FILE = os.path.join(module_path, 'configs.cfg')
ENV_ARG_NAMES = [('sha256list', list), ('random_sample', lambda x: x.lower() == 'true'), ('maxturns', int), ('output_path',str), 
('cache', lambda x: x.lower() == 'true'), ('target_model_path', str)]

config = configparser.ConfigParser()
config.read(CONFIG_FILE)
default_config = dict(config['Defaults'])
for section in config.sections():
    if section == 'Defaults':
        continue
    args = {}
    args.update(default_config)
    args.update(dict(config[section]))

    sha256 = interface.get_available_sha256(args['sample_path'])
    sha256_train, sha256_holdout = train_test_split(sha256, test_size=int(args['test_size']))
    kwargs = dict([(k, type_(args[k])) for k,type_ in ENV_ARG_NAMES if k in args])
    entry_point = 'gym_malware.envs:MalwareScoreEnv' if args['use_score'].lower() == 'true' else 'gym_malware.envs:MalwareEnv'
    
    kwargs['sha256list'] = sha256_train
    register(id = args['env_id'] + "-v0",
             entry_point = entry_point,
             kwargs = kwargs)

    kwargs['sha256list'] = sha256_holdout
    kwargs['random_sample'] = False
    register(id = args['env_id'] + "-test-v0",
             entry_point = entry_point,
             kwargs = kwargs)
